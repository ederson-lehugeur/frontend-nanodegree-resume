//$("#main").append("Charlie Chaplin");

/*
var firstName = "Eddye";
var age = 32;
console.log(firstName);
*/

/*
var awesomeThoughts = "I am Eddye and I am AWESOME!";
console.log(awesomeThoughts);

var funThoughts = awesomeThoughts.replace("AWESOME", "FUN");
console.log(funThoughts);
$("#main").append(funThoughts);
*/

/*
var s = "audacity";

var udacityizer = function(s) {
	s = s[1].toUpperCase() + s.slice(2);
	
	return s;
}

console.log(udacityizer(s));
*/

var name = "Éderson Lehugeur";
var role = "Web Developer";

var formattedName = HTMLheaderName.replace("%data%", name);
var formattedRole = HTMLheaderRole.replace("%data%", role);

$("#header").prepend(formattedRole);
$("#header").prepend(formattedName);

var skills = ["awesomeness", "programming", "teaching", "JS"];

/*
var numbers = [0, 1, 2, 3];

$("#main").append(skills);
$("#main").append(skills[0]);
$("#main").append(skills.length);

$("#main").append(numbers);
numbers.pop();
$("#main").append(numbers);
numbers.push(3);
numbers.push(4);
$("#main").append(numbers);
*/

/*
var sampleArray = [0,0,7];

var incrementLastArrayElement = function(_array) {
	// Atribuição por valor. Fará uma cópia do array para não modificar o original.
	var newArray = _array.slice();
	// Atribuição por referência.
	//var newArray = _array;
    var lastValue = newArray.pop();
    newArray.push(lastValue + 1);

    return newArray;
};

console.log(incrementLastArrayElement(sampleArray));
*/

/*
var name = "AlbERt EINstEiN";

function nameChanger(oldName) {
    var finalName = oldName;
    // Your code goes here!
	var names = oldName.split(" ");
	names[0] = names[0].slice(0,1).toUpperCase() + names[0].slice(1).toLowerCase();
	names[1] = names[1].toUpperCase();
	// Une elementos de um array em uma única string com espaços entre os elementos.
    finalName = names.join(" ");
    // Don't delete this line!
    return finalName;
};

// Did your code work? The line below will tell you!
console.log(nameChanger(name));
*/

// Objeto literal.
var bio = {
	"name": "Éderson Lehugeur",
	"role": "Web Developer",
	"contacts": {
		"mobile": "(51) 99999-9999",
		"email": "eder@example.com",
		"github": "edersonlehugeur",
		"facebook": "@edersonlehugeur",
		"location": "Porto Alegre"
	},
	"welcomeMessage": "lorem ipsum dolor sit amet etc.",
	"skills": ["awesomeness", "delivering things", "cryogenic sleep", "saving the universe"],
	"bioPic": "images/fry.jpg"
};

//$("#main").append(bio.name);

/*
// Notação de ponto.
// Cria uma nova propriedade e a define.
bio.city = "Porto Alegre";
bio.email = "eder@example.com";
*/

/*
// Notação de colchete.
bio["city"] = "Porto Alegre";
bio["email"] = "eder@example.com";
*/

/*
var work = {};
work.position = "Course Developer";
work.employer = "Udacity";
work.years = 0.3;

var education = {};
education["name"] = "Nova Southeastern University";
education["years"] = "2005 - 2013";
education["city"] = "Fort Lauderdale, FL, US";

$("#main").append(work["position"]);
$("#main").append(education.name);
*/

// Valor da propriedade schools é um array de objetos.
// Valor da propriedade major é um array de strings.

var education = {
	"schools": [{
			"name": "Eckerd College",
			"location": "Saint Petersburg, FL, US",
			"degree": "BA",
			"major": ["CompSci", "French"],
			"dates": 2003,
			"url": "http://example.com"
		}, {
			"name": "Nova Southeastern University",
			"city": "Fort Lauderdale, FL, US",
			"degree": "Masters",
			"major": ["CompSci"],
			"dates": 2013,
			"url": "http://example.com"
		}
	],
	"onlineCourses": [{
			"title": "JavaScript Syntax",
			"school" "Udacity",
			"dates": 2014,
			"url": "http://www.udacity.com/course/ud804"
		}
	]
}

// Todo HTML é convertido em um objeto JavaScript chamado Document Object Model.
// Com o DOM é possível manipular todos os elementos da página.
/*
document.getElementsByClassName("text-atom")[0]
*/

/*
var charEscape = function(_html) {
    var newHTML = _html;

	// /[exp1]|[exp2]|[exp3]/[parâmetro]
	// g = global; gi = global, case-insensitive (ignora maiúsculas e minúsculas)
    newHTML = _html.replace(/</g, "&lt;");
    newHTML = newHTML.replace(/>/g, "&gt;");

    return newHTML;
};
*/

/*
var weirdObject = {
    "property": "Time for an astronomy lesson!",
    "property1": "Cameron's minor in college was astronomy",
    "property-2": "The 4 Galilean largest moons of Jupiter are:",
    "property 3": "Io, Ganymede, Callisto, Europa",
    "property$": "Saturn's moon Enceladus has liquid water ocean under its icy surface",
    " property": "The Sun contains 99.87% of the mass of the entire solar system",
    "property()": "There are 5 dwarf planets in our solar system:",
    "property[]": "Pluto, Ceres, Eris, Haumea, Makemake",
    "8property": "Mars has two tiny moons: Phobos and Deimos"
};

// Use console.log() to figure out if dot and/or bracket notation
// will work to access the properties below. Mark true if you can use dot/bracket
// notation to access the property, otherwise mark false.

// For example, uncomment the line below to see if you can use dot notation to access `property1`.
// console.log(weirdObject.property1);

// I'll give you the first answer. The rest are set to false. Try out each property and
// if you can use dot or bracket notation to access it, change the answer to true!

// property
var dotNotation0 = true;
var bracketNotation0 = true;

// Tests
console.log(weirdObject.property);
console.log(weirdObject["property"]);

// property1
var dotNotation1 = true;
var bracketNotation1 = true;

// property-2
var dotNotation2 = false;
var bracketNotation2 = true;

// property 3
var dotNotation3 = false;
var bracketNotation3 = true;

// property$
var dotNotation4 = true;
var bracketNotation4 = true;

// *space*property
var dotNotation5 = false;
var bracketNotation5 = true;

// property()
var dotNotation6 = false;
var bracketNotation6 = true;

// property[]
var dotNotation7 = false;
var bracketNotation7 = true;

// 8property
var dotNotation8 = false;
var bracketNotation8 = true;
*/

var cameron = {};
cameron.job = "course dev";

var makeCourse = function() {
	// Make a course.
	console.log("Made a course!");
}

var courses = 0;
while (cameron.job === "course dev") {
	makeCourse();
	courses++;
	if (courses === 10)
		cameron.job = "learning specialist";
}

console.log(cameron.job);

for (var i = 0; i < 10; i++)
	console.log(i);
	
var countries = ["germany", "argentina", "brazil", "netherlands"];

// O "country" é o índice do item no array ou objeto, não o valor. (Ponteiro)
for (country in countries) {
	console.log(countries[country]);
}

// Use forEach ou for para iterar sobre arrays como o seguinte:
countries = ['Argentina', 'China', 'England'];

// Use for-in para executar um loop sobre objetos como o seguinte:
countries = {'country1': 'Argentina', 'country2': 'China', 'country3': 'England'};

// Tendo o cuidado de colocar os comandos internos do loop for-in em uma instrução 
// condicional que verifica se a chave faz parte do objeto, ou seja, se a chave é 
// uma propriedade do objeto:
myObj = {'country1': 'Germany', 'country2': 'Argentina'};
for (key in myObj){
    if (myObj.hasOwnProperty(key)) {
        console.log(myObj[key]);
    }
}

var formattedName = HTMLheaderName.replace("%data%", bio.name);
var formattedRole = HTMLheaderRole.replace("%data%", bio.role);
var formattedBioPic = HTMLbioPic.replace("%data%", bio.picture);
var formattedWelcomeMsg = HTMLwelcomeMsg.replace("%data%", bio.welcomeMessage);

var formattedContactInfo = [];
formattedContactInfo.push(HTMLemail.replace("%data%", bio.contacts.email));
formattedContactInfo.push(HTMLgithub.replace("%data%", bio.contacts.github));
formattedContactInfo.push(HTMLtwitter.replace("%data%", bio.contacts.twitter));
formattedContactInfo.push(HTMLlocation.replace("%data%", bio.contacts.location));

$("#header").prepend(formattedRole);
$("#header").prepend(formattedName);
$("#header").append(formattedBioPic);
$("#header").append(formattedWelcomeMsg);

if (bio.skills.length > 0) {
	$("#header").append(HTMLskillsStart);
	
	/*
	for (var i = 0; i < bio.skills.length; i++) {
		var formattedSkill = HTMLskills.replace("%data%", bio.skills[i]);
		$("#skills").append(formattedSkill);
	}
	*/
	
	for (skill in bio.skills) {
		var formattedSkill = HTMLskills.replace("%data%", bio.skills[skill]);
		$("#skills").append(formattedSkill);
	}
}

for(contact in formattedContactInfo) {
	$("#topContacts").append(formattedContactInfo[contact]);
	//$("#footerContacts").append(formattedContactInfo[contact]);
}

if (work.jobs.length > 0) {
	$("#workExperience").append(HTMLworkStart);
	
	for (job in work.jobs) {
		var formattedEmployer = HTMLworkEmployer.replace("%data%", work.jobs[job].employer);
		var formattedTitle = HTMLworkTitle.replace("%data%", work.jobs[job].title);
		var formattedEmployerTitle = formattedEmployer + formattedTitle;
		
		// O ":last" seleciona o último elemento da classe.
		$(".work-entry:last").append(formattedEmployerTitle);
		
		var formattedDates = HTMLworkDates.replace("%data%", work.jobs[job].dates);
		$(".work-entry:last").append(formattedDates);
		
		var formattedDescription = HTMLworkDescription.replace("%data%", work.jobs[job].description);
		$(".work-entry:last").append(formattedDescription);
	}
}